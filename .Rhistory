design_formula <- ~ Batch + SampleType
}
else{
design_formula <- ~ SampleType
}
dat2 <- as.matrix(countdata[, colnames(countdata) %in% rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~ design_formula)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 6,]
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
res$symbol <- map_function.df(res, "ENSEMBL", "SYMBOL")
res$EntrezGene <- map_function.df(res, "ENSEMBL", "ENTREZID")
All_res <<- as.data.frame(res[, c(7:8, 1:6)])
}
DEG(countdata = rawcountdata,meta = meta)
DEG(rawcountdata,meta)
countdata = rawcountdata,meta = meta
countdata = rawcountdata
design_formula <- ~ SampleType
dat2 <- as.matrix(countdata[, colnames(countdata) %in% rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~ design_formula)
meta
meta$SampleType
DEG(countdata = rawcountdata,meta = meta,include.batch = FALSE)
meta
## custom function for DESeq analysis
DEG.SampleType <- function(rawdata,meta) {
dseq_res <- data.frame()
All_res <- data.frame()
dat2 <- as.matrix(rawdata[, colnames(rawdata) %in% rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~ SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 8,]
#ddsHTSeq$Genotype <- relevel(ddsHTSeq$Genotype, ref = "LOAD2")
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
res$symbol <- map_function.df(res, "ENSEMBL", "SYMBOL")
res$EntrezGene <- map_function.df(res, "ENSEMBL", "ENTREZID")
All_res <<- as.data.frame(res[, c(7:8, 1:6)])
}
DEG.SampleType(rawcountdata,meta)
DE_Genotype.list <- list()
DE_Genotype.df <- data.frame()
#
for (i in 1:nrow(comparisons)){
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
DEG.SampleType(rawcountdata,meta)
#append results in data frame
DE_Genotype.df <- rbind(DE_Genotype.df,All_res %>% mutate(model=gsub("-.*$","",comparisons[i,2])[1],sex=unique(meta$Sex),Age=sapply(strsplit(comparisons[i,2], "-"), "[", 3), group = paste0( model,"-B6","(",sex,"-",Age,")"))
)
#append results in list
DE_Genotype.list[[i]] <- All_res
names(DE_Genotype.list)[i] <- paste0(model=gsub("-.*$","",comparisons[i,2])[1],"-", "B6","(",sex=unique(meta$Sex),"-",Age=sapply(strsplit(comparisons[i,2], "-"), "[", 3),")")
}
degs.up <- map(DE_Genotype.list, ~length(which(.x$padj<0.05 & .x$log2FoldChange>0)))
degs.down <- map(DE_Genotype.list, ~length(which(.x$padj<0.05 & .x$log2FoldChange<0)))
deg1 <- data.frame(comparison=names(degs.up), Up_DEGs.pval.05=as.vector(unlist(degs.up)),Down_DEGs.pval.05=as.vector(unlist(degs.down)))
deg1 %>% gt() %>%
tab_style(
style = list(cell_fill(color = "lightblue"),
cell_text(style = "italic")),
locations = cells_body(rows = comparison %like% "Female")
) %>% tab_options(table.width = pct(80)) %>%
tab_header(title = md("total number of differentially expressed genes at `adjP<0.05`"))
comparisons
# Reading the count data
gene_counts <- read_tsv("data/rnaseq_rsem.merged.gene_counts.tsv") %>% dplyr::select(-"transcript_id(s)")
gene_tpm <- read_tsv("data/rnaseq_rsem.merged.gene_tpm.tsv") %>% dplyr::select(-"transcript_id(s)")
# Let’s check how many gene_ids are NOT from the mouse genome
gene_counts[,1:3] %>%
filter(!str_detect(gene_id, "MUS"))
tg.counts <- gene_counts %>%
filter(gene_id %in% c("ENSG00000080815","ENSMUSG00000019969",
"ENSG00000142192","ENSMUSG00000022892")) %>%
pivot_longer(.,cols = -"gene_id",names_to = "Names",values_to="counts") %>%
mutate(Names=as.integer(Names)) %>%
left_join(meta ,by=c("Names"))
head(tg.counts)
# Reading metadata
meta <- read.csv("data/metadata_5XFAD_RNASeq_JAX.csv")
# Reading the count data
gene_counts <- read_tsv("data/rnaseq_rsem.merged.gene_counts.tsv") %>% dplyr::select(-"transcript_id(s)")
gene_tpm <- read_tsv("data/rnaseq_rsem.merged.gene_tpm.tsv") %>% dplyr::select(-"transcript_id(s)")
# Let’s check how many gene_ids are NOT from the mouse genome
gene_counts[,1:3] %>%
filter(!str_detect(gene_id, "MUS"))
tg.counts <- gene_counts %>%
filter(gene_id %in% c("ENSG00000080815","ENSMUSG00000019969",
"ENSG00000142192","ENSMUSG00000022892")) %>%
pivot_longer(.,cols = -"gene_id",names_to = "Names",values_to="counts") %>%
mutate(Names=as.integer(Names)) %>%
left_join(meta ,by=c("Names"))
head(tg.counts)
tg.counts <- tg.counts %>%
mutate(
Age = factor(Age, levels = c(4,12))
)
# add gene symbols
tg.counts <- tg.counts %>%
mutate(
symbol = case_when(
gene_id == "ENSG00000142192" ~ "Human APP",
gene_id == "ENSG00000080815" ~ "Human PSEN1",
gene_id == "ENSMUSG00000022892" ~ "Mouse App",
gene_id == "ENSMUSG00000019969" ~ "Mouse Psen1"
)
)
ggplot(tg.counts, aes(x=Genotype, y=counts, color=Age, shape = Sex)) +
geom_boxplot() +
#geom_point(position=position_jitterdodge())+
facet_wrap(~symbol, scales = 'free')+
theme_bw()
#Let's combine the expression of corresponding human and mouse genes by summing the expression and saving the summed expression as expression of mouse genes, respectively to match with gene names in control mice.
# move the gene_id column to rownames, to enable summing across rows
counts <- gene_counts %>% column_to_rownames("gene_id")
#merge mouse and human APOE gene raw count
counts[rownames(counts) %in% "ENSMUSG00000022892",] <-
counts[rownames(counts) %in% "ENSMUSG00000022892",] +
counts[rownames(counts) %in% "ENSG00000142192",]
#merge mouse and human PS1 gene raw count
counts[rownames(counts) %in% "ENSMUSG00000019969",] <-
counts[rownames(counts) %in% "ENSMUSG00000019969",] +
counts[rownames(counts) %in% "ENSG00000080815",]
counts <- counts[!rownames(counts) %in% c("ENSG00000080815","ENSG00000142192"),]
# We can confirm that the human genes are now absent from the counts table:
counts[,1:6] %>% filter(!str_detect(rownames(.), "MUS"))
dim(counts)
counts[1:5,1:5]
rawcountdata[1:5,1:5]
head(meta)
df_int <- counts %>% mutate(across(everything(), as.integer))
rawcountdata <- df_int[,colnames(df_int) %in% meta$Names]
head(metadata)
## custom function for DESeq analysis
DEG.SampleType <- function(rawdata,meta) {
dseq_res <- data.frame()
All_res <- data.frame()
dat2 <- as.matrix(rawdata[, colnames(rawdata) %in% rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~ SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 8,]
#ddsHTSeq$Genotype <- relevel(ddsHTSeq$Genotype, ref = "LOAD2")
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
res$symbol <- map_function.df(res, "ENSEMBL", "SYMBOL")
res$EntrezGene <- map_function.df(res, "ENSEMBL", "ENTREZID")
All_res <<- as.data.frame(res[, c(7:8, 1:6)])
}
## add group column to metadata
metadata <- metadata %>%
mutate(Group = paste0(.$Genotype,"-",.$Sex,"-",.$Age,"M")) %>%
mutate(Genotype = factor(Genotype, levels = c('WT','5XFAD')))
comparisons <-  data.frame(control=c("WT-F-4M" ,  "WT-M-4M" , "WT-F-6M" ,  "WT-M-6M" , "WT-F-12M"  ,  "WT-M-12M"),
case=c("5XFAD-F-4M" ,  "5XFAD-M-4M" , "5XFAD-F-6M" ,  "5XFAD-M-6M" , "5XFAD-F-12M"  ,  "5XFAD-M-12M"))
i=3
comparisons[3,]
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
meta
DEG.SampleType(rawcountdata,meta)
## custom function for DESeq analysis
DEG.SampleType <- function(rawdata,meta) {
dseq_res <- data.frame()
All_res <- data.frame()
dat2 <- as.matrix(rawdata[, colnames(rawdata) %in% rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~ SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 8,]
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
res$symbol <- map_function.df(res, "ENSEMBL", "SYMBOL")
res$EntrezGene <- map_function.df(res, "ENSEMBL", "ENTREZID")
All_res <<- as.data.frame(res[, c(7:8, 1:6)])
}
ln = load("data/ProcessedData_Brain_Transcriptomics.RData")
ln
dim(rawcountdata)
rawcountdata[1:5,1:5]
colnames(rawcountdata)
head(metadata)
meta <- read.csv("~/Library/CloudStorage/Box-Box/Ravi Pandey Workspace/MiceRNASeq_Cohorts/5XFAD/data/metadata_5XFAD_RNASeq_JAX.csv",row.names = 1)
dim(meta)
head(meta)
comparisons[1]
comparisons[1,]
dim(metadata)
head(metadata)
comparisons <-  data.frame(control=c("WT-F-4M" ,  "WT-M-4M" , "WT-F-6M" ,  "WT-M-6M" , "WT-F-12M"  ,  "WT-M-12M"),
case=c("5XFAD-F-4M" ,  "5XFAD-M-4M" , "5XFAD-F-6M" ,  "5XFAD-M-6M" , "5XFAD-F-12M"  ,  "5XFAD-M-12M"))
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
meta
meta$SampleType
DEG.SampleType(rawcountdata,meta)
dim(dat2)
dat2[1:5,1:5]
data <- read.table("~/Library/CloudStorage/Box-Box/Ravi Pandey Workspace/MiceRNASeq_Cohorts/5XFAD/data/read_counts/Starcounts_5XFAD.txt",check.names = FALSE,row.names = 1,header=TRUE)
data[1:5,1:5]
gene_counts[1:5,1:5]
gene_counts[1:5,1:6]
glimpe(data)
glimpse(data)
DEG.SampleType(data,meta)
head(meta)
dat2 <- as.matrix(data[, colnames(data) %in% rownames(meta)])
dim(dat2)
head(meta)
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~ SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 8,]
ddsHTSeq
head(dat2)
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
head(meta)
design_formula
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 8,]
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
getwd()
DEG.SampleType <- function(rawdata,meta) {
dseq_res <- data.frame()
All_res <- data.frame()
dat2 <- as.matrix(rawdata[, colnames(rawdata) %in% rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~ SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 6,]
#ddsHTSeq$Genotype <- relevel(ddsHTSeq$Genotype, ref = ref)
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
res$symbol <- map_function.df(res, "ENSEMBL", "SYMBOL")
res$EntrezGene <- map_function.df(res, "ENSEMBL", "ENTREZID")
All_res <<- as.data.frame(res[, c(7:8, 1:6)])
}
comparisons <-  data.frame(control=c("C57BL/6J-Female-4M" ,  "C57BL/6J-Male-4M" , "C57BL/6J-Female-12M"  ,  "C57BL/6J-Male-12M"),
case=c("B6J.LOAD3-Female-4M", "B6J.LOAD3-Male-4M",   "B6J.LOAD3-Female-12M", "B6J.LOAD3-Male-12M" ))
load("~/Library/CloudStorage/Box-Box/Ravi Pandey Workspace/MiceRNASeq_Cohorts/LOAD3/data/ProcessedData_LOAD3_Brain_Transcriptomics.RData")
metadata <- metadata_LOAD3  %>%
mutate(Genotype = factor(Genotype, levels = c('C57BL/6J','B6J.LOAD3')))
metadata$Group <- paste0(metadata$Genotype,"-",metadata$Sex,"-",metadata$Age,"M")
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
meta
DEG.SampleType(rawcountdata,meta)
comparisons <-  data.frame(control=c("WT-F-4M" ,  "WT-M-4M" , "WT-F-6M" ,  "WT-M-6M" , "WT-F-12M"  ,  "WT-M-12M"),
case=c("5XFAD-F-4M" ,  "5XFAD-M-4M" , "5XFAD-F-6M" ,  "5XFAD-M-6M" , "5XFAD-F-12M"  ,  "5XFAD-M-12M"))
# LOAD clean and formatted RNA-seq count data
load("data/ProcessedData_Brain_Transcriptomics.RData")
## add group column to metadata
metadata <- metadata %>%
mutate(Group = paste0(.$Genotype,"-",.$Sex,"-",.$Age,"M")) %>%
mutate(Genotype = factor(Genotype, levels = c('WT','5XFAD')))
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
meta
DEG.SampleType(rawcountdata,meta)
dim(data)
data[1:5,1:8]
meta <- read.csv("~/Library/CloudStorage/Box-Box/Ravi Pandey Workspace/MiceRNASeq_Cohorts/5XFAD/data/metadata_5XFAD_RNASeq_JAX.csv",row.names = 1)
metadata <- meta[sort(rownames(meta)),]
head(metadata)
design_formula <- ~Genotype
rawdata <- data
data <- metadata[metadata$Sex=="M" & metadata$Age==4 & (metadata$Genotype=="5XFAD" | metadata$Genotype=="WT"),]
data
dat <- as.matrix(rawdata[,colnames(rawdata) %in% rownames(data)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData=dat, colData=data, design= design_formula)
ddsHTSeq
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 1,]
ddsHTSeq$Genotype <- relevel(ddsHTSeq$Genotype,ref="WT")
dds <- DESeq(ddsHTSeq,parallel = TRUE)
res <- results(dds,alpha=0.05)
summary(res)
data
# LOAD clean and formatted RNA-seq count data
load("data/ProcessedData_Brain_Transcriptomics.RData")
## add group column to metadata
metadata <- metadata %>%
mutate(Group = paste0(.$Genotype,"-",.$Sex,"-",.$Age,"M")) %>%
mutate(Genotype = factor(Genotype, levels = c('WT','5XFAD')))
i=2
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
meta
rawcountdata[1:5,1:5]
setdiff(meta$Names,rownames(data))
dat2 <- as.matrix(rawdata[, colnames(rawdata) %in% rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 1,]
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
colnames(dat2)
rownames(meta)
dat2 <- as.matrix(rawdata[, rownames(meta)])
colnames(dat2)
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 1,]
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 6,]
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
## custom function for DESeq analysis
DEG.SampleType <- function(rawdata,meta) {
dseq_res <- data.frame()
All_res <- data.frame()
dat2 <- as.matrix(rawdata[, rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 6,]
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
res$symbol <- map_function.df(res, "ENSEMBL", "SYMBOL")
res$EntrezGene <- map_function.df(res, "ENSEMBL", "ENTREZID")
All_res <<- as.data.frame(res[, c(7:8, 1:6)])
}
## add group column to metadata
metadata <- metadata %>%
mutate(Group = paste0(.$Genotype,"-",.$Sex,"-",.$Age,"M")) %>%
mutate(Genotype = factor(Genotype, levels = c('WT','5XFAD')))
comparisons <-  data.frame(control=c("WT-F-4M" ,  "WT-M-4M" , "WT-F-6M" ,  "WT-M-6M" , "WT-F-12M"  ,  "WT-M-12M"),
case=c("5XFAD-F-4M" ,  "5XFAD-M-4M" , "5XFAD-F-6M" ,  "5XFAD-M-6M" , "5XFAD-F-12M"  ,  "5XFAD-M-12M"))
DE_Genotype.list <- list()
DE_Genotype.df <- data.frame()
#
for (i in 1:nrow(comparisons)){
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
DEG.SampleType(rawcountdata,meta)
#append results in data frame
DE_Genotype.df <- rbind(DE_Genotype.df,All_res %>% mutate(model=gsub("-.*$","",comparisons[i,2])[1],sex=unique(meta$Sex),Age=sapply(strsplit(comparisons[i,2], "-"), "[", 3), group = paste0( model,"-B6","(",sex,"-",Age,")"))
)
#append results in list
DE_Genotype.list[[i]] <- All_res
names(DE_Genotype.list)[i] <- paste0(model=gsub("-.*$","",comparisons[i,2])[1],"-", "B6","(",sex=unique(meta$Sex),"-",Age=sapply(strsplit(comparisons[i,2], "-"), "[", 3),")")
}
load("~/Library/CloudStorage/Box-Box/Ravi Pandey Workspace/MiceRNASeq_Cohorts/LOAD3/data/ProcessedData_LOAD3_Brain_Transcriptomics.RData")
metadata <- metadata_LOAD3  %>%
mutate(Genotype = factor(Genotype, levels = c('C57BL/6J','B6J.LOAD3')))
metadata$Group <- paste0(metadata$Genotype,"-",metadata$Sex,"-",metadata$Age,"M")
DEG.SampleType <- function(rawdata,meta) {
dseq_res <- data.frame()
All_res <- data.frame()
dat2 <- as.matrix(rawdata[, colnames(rawdata) %in% rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~ SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 6,]
#ddsHTSeq$Genotype <- relevel(ddsHTSeq$Genotype, ref = ref)
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
res$symbol <- map_function.df(res, "ENSEMBL", "SYMBOL")
res$EntrezGene <- map_function.df(res, "ENSEMBL", "ENTREZID")
All_res <<- as.data.frame(res[, c(7:8, 1:6)])
}
comparisons <-  data.frame(control=c("C57BL/6J-Female-4M" ,  "C57BL/6J-Male-4M" , "C57BL/6J-Female-12M"  ,  "C57BL/6J-Male-12M"),
case=c("B6J.LOAD3-Female-4M", "B6J.LOAD3-Male-4M",   "B6J.LOAD3-Female-12M", "B6J.LOAD3-Male-12M" ))
# # genotype + diet
i=3
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
meta
rownames(meta)
dat2 <- as.matrix(rawcountdata[, colnames(rawcountdata) %in% rownames(meta)])
colnames(dat2)
DEG.SampleType(rawcountdata,meta)
metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype") %>% pull("Names")
metadata[metadata$Group %in% comparisons[1,] ,] %>% rename("SampleType" = "Genotype") %>% pull("Names")
metadata[metadata$Group %in% comparisons[2,] ,] %>% rename("SampleType" = "Genotype") %>% pull("Names")
metadata[metadata$Group %in% comparisons[3,] ,] %>% rename("SampleType" = "Genotype") %>% pull("Names")
metadata[metadata$Group %in% comparisons[4,] ,] %>% rename("SampleType" = "Genotype") %>% pull("Names")
colnames(as.matrix(rawdata[, colnames(rawdata) %in% rownames(meta)]))
# LOAD clean and formatted RNA-seq count data
load("data/ProcessedData_Brain_Transcriptomics.RData")
metadata <- metadata %>%
mutate(Group = paste0(.$Genotype,"-",.$Sex,"-",.$Age,"M")) %>%
mutate(Genotype = factor(Genotype, levels = c('WT','5XFAD')))
comparisons <-  data.frame(control=c("WT-F-4M" ,  "WT-M-4M" , "WT-F-6M" ,  "WT-M-6M" , "WT-F-12M"  ,  "WT-M-12M"),
case=c("5XFAD-F-4M" ,  "5XFAD-M-4M" , "5XFAD-F-6M" ,  "5XFAD-M-6M" , "5XFAD-F-12M"  ,  "5XFAD-M-12M"))
DE_Genotype.list <- list()
DE_Genotype.df <- data.frame()
#
for (i in 1:nrow(comparisons)){
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
DEG.SampleType(rawcountdata,meta)
#append results in data frame
DE_Genotype.df <- rbind(DE_Genotype.df,All_res %>% mutate(model=gsub("-.*$","",comparisons[i,2])[1],sex=unique(meta$Sex),Age=sapply(strsplit(comparisons[i,2], "-"), "[", 3), group = paste0( model,"-B6","(",sex,"-",Age,")"))
)
#append results in list
DE_Genotype.list[[i]] <- All_res
names(DE_Genotype.list)[i] <- paste0(model=gsub("-.*$","",comparisons[i,2])[1],"-", "B6","(",sex=unique(meta$Sex),"-",Age=sapply(strsplit(comparisons[i,2], "-"), "[", 3),")")
}
#save(DE_Genotype.list,DE_Genotype.df,file="~/results/DESeq_Results_Transcripotmics.RData")
## Summary table of differential analysis results
degs.up <- map(DE_Genotype.list, ~length(which(.x$padj<0.05 & .x$log2FoldChange>0)))
degs.down <- map(DE_Genotype.list, ~length(which(.x$padj<0.05 & .x$log2FoldChange<0)))
deg1 <- data.frame(comparison=names(degs.up), Up_DEGs.pval.05=as.vector(unlist(degs.up)),Down_DEGs.pval.05=as.vector(unlist(degs.down)))
deg1 %>% gt() %>%
tab_style(
style = list(cell_fill(color = "lightblue"),
cell_text(style = "italic")),
locations = cells_body(rows = comparison %like% "Female")
) %>% tab_options(table.width = pct(80)) %>%
tab_header(title = md("total number of differentially expressed genes at `adjP<0.05`"))
# LOAD clean and formatted RNA-seq count data
load("data/ProcessedData_Brain_Transcriptomics.RData")
## custom function for DESeq analysis
DEG.SampleType <- function(rawdata,meta) {
dseq_res <- data.frame()
All_res <- data.frame()
dat2 <- as.matrix(rawdata[, rownames(meta)])
ddsHTSeq <- DESeqDataSetFromMatrix(countData = dat2,
colData = meta,
design = ~SampleType)
ddsHTSeq <- ddsHTSeq[rowSums(counts(ddsHTSeq)) >= 6,]
dds <- DESeq(ddsHTSeq, parallel = TRUE)
res <- results(dds, alpha = 0.05)
summary(res)
res$symbol <- map_function.df(res, "ENSEMBL", "SYMBOL")
res$EntrezGene <- map_function.df(res, "ENSEMBL", "ENTREZID")
All_res <<- as.data.frame(res[, c(7:8, 1:6)])
}
## add group column to metadata
metadata <- metadata %>%
mutate(Group = paste0(.$Genotype,"-",.$Sex,"-",.$Age,"M")) %>%
mutate(Genotype = factor(Genotype, levels = c('WT','5XFAD')))
comparisons <-  data.frame(control=c("WT-F-4M" ,  "WT-M-4M" , "WT-F-6M" ,  "WT-M-6M" , "WT-F-12M"  ,  "WT-M-12M"),
case=c("5XFAD-F-4M" ,  "5XFAD-M-4M" , "5XFAD-F-6M" ,  "5XFAD-M-6M" , "5XFAD-F-12M"  ,  "5XFAD-M-12M"))
DE_Genotype.list <- list()
DE_Genotype.df <- data.frame()
#
for (i in 1:nrow(comparisons)){
meta <- metadata[metadata$Group %in% comparisons[i,] ,] %>% rename("SampleType" = "Genotype")
DEG.SampleType(rawcountdata,meta)
#append results in data frame
DE_Genotype.df <- rbind(DE_Genotype.df,All_res %>% mutate(model=gsub("-.*$","",comparisons[i,2])[1],sex=unique(meta$Sex),Age=sapply(strsplit(comparisons[i,2], "-"), "[", 3), group = paste0( model,"-B6","(",sex,"-",Age,")"))
)
#append results in list
DE_Genotype.list[[i]] <- All_res
names(DE_Genotype.list)[i] <- paste0(model=gsub("-.*$","",comparisons[i,2])[1],"-", "B6","(",sex=unique(meta$Sex),"-",Age=sapply(strsplit(comparisons[i,2], "-"), "[", 3),")")
}
save(DE_Genotype.list,DE_Genotype.df,file="data/DESeq_Results_Transcripotmics.RData")
degs.up <- map(DE_Genotype.list, ~length(which(.x$padj<0.05 & .x$log2FoldChange>0)))
degs.down <- map(DE_Genotype.list, ~length(which(.x$padj<0.05 & .x$log2FoldChange<0)))
deg1 <- data.frame(comparison=names(degs.up), Up_DEGs.pval.05=as.vector(unlist(degs.up)),Down_DEGs.pval.05=as.vector(unlist(degs.down)))
deg1 %>% gt() %>%
tab_style(
style = list(cell_fill(color = "lightblue"),
cell_text(style = "italic")),
locations = cells_body(rows = comparison %like% "Female")
) %>% tab_options(table.width = pct(80)) %>%
tab_header(title = md("total number of differentially expressed genes at `adjP<0.05`"))
names(DE_Genotype.list)
for (i in 1:names(DE_Genotype.list)) {print(i)}
for (i in 1:names(DE_Genotype.list)) {print("i")}
length(DE_Genotype.list)
dat <- DE_Genotype.list[[1]]
head(dat)
for (i in 1:length(DE_Genotype.list))
{
dat <- DE_Genotype.list[[i]]
EnhancedVolcano(dat,
lab = (dat$symbol),x = 'log2FoldChange', y = 'padj',legendPosition = 'none',
title = names(DE_Genotype.list)[i],subtitle = '',
FCcutoff = 0.0,pCutoff = 0.05,xlim = c(-3, 3))
}
for (i in 1:length(DE_Genotype.list))
{
dat <- DE_Genotype.list[[i]]
print(
EnhancedVolcano(dat,
lab = (dat$symbol),x = 'log2FoldChange', y = 'padj',legendPosition = 'none',
title = names(DE_Genotype.list)[i],subtitle = '',
FCcutoff = 0.0,pCutoff = 0.05,xlim = c(-3, 3))
)
}
range(DE_Genotype.df$log2FoldChange)
for (i in 1:length(DE_Genotype.list))
{
dat <- DE_Genotype.list[[i]]
print(
EnhancedVolcano(dat,
lab = (dat$symbol),x = 'log2FoldChange', y = 'padj',legendPosition = 'none',
title = names(DE_Genotype.list)[i],subtitle = '',
FCcutoff = 0.0,pCutoff = 0.05,xlim = c(-5, 5))
)
}
